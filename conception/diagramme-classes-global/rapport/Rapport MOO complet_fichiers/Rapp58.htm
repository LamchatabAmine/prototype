<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<title>Rapport de listes MOO
</title>
<link href="Theme_BleuClair.css" type="text/css" rel="stylesheet">
</head>
<!--Ce fichier a été généré automatiquement par PowerAMC.-->
<body>
<h2>
<a name="123">Classe Projet</a> 
</h2>
<h3>
<a name="126">Aperçu du code de la classe Projet</a> 
</h3>
<table class="Text" border="1" cellpadding="3" cellspacing="1" width="100%"><tr><td>
<p align="left">/***********************************************************************<br />
 * Module:  Projet.cs<br />
 * Author:  essarraj<br />
 * Purpose: Definition of the Class gestion_projets.Projet<br />
 ***********************************************************************/<br />
<br />
using System;<br />
<br />
namespace gestion_projets<br />
{<br />
   public class Projet<br />
   {<br />
      public StatutProjet statutProjet;<br />
      public System.Collections.ArrayList apprenant;<br />
      <br />
      /// &lt;pdGenerated&gt;default getter&lt;/pdGenerated&gt;<br />
      public System.Collections.ArrayList GetApprenant()<br />
      {<br />
         if (apprenant == null)<br />
            apprenant = new System.Collections.ArrayList();<br />
         return apprenant;<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default setter&lt;/pdGenerated&gt;<br />
      public void SetApprenant(System.Collections.ArrayList newApprenant)<br />
      {<br />
         RemoveAllApprenant();<br />
         foreach (gestion_rh.Apprenant oApprenant in newApprenant)<br />
            AddApprenant(oApprenant);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Add&lt;/pdGenerated&gt;<br />
      public void AddApprenant(gestion_rh.Apprenant newApprenant)<br />
      {<br />
         if (newApprenant == null)<br />
            return;<br />
         if (this.apprenant == null)<br />
            this.apprenant = new System.Collections.ArrayList();<br />
         if (!this.apprenant.Contains(newApprenant))<br />
            this.apprenant.Add(newApprenant);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Remove&lt;/pdGenerated&gt;<br />
      public void RemoveApprenant(gestion_rh.Apprenant oldApprenant)<br />
      {<br />
         if (oldApprenant == null)<br />
            return;<br />
         if (this.apprenant != null)<br />
            if (this.apprenant.Contains(oldApprenant))<br />
               this.apprenant.Remove(oldApprenant);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default removeAll&lt;/pdGenerated&gt;<br />
      public void RemoveAllApprenant()<br />
      {<br />
         if (apprenant != null)<br />
            apprenant.Clear();<br />
      }<br />
      public System.Collections.ArrayList taches;<br />
      <br />
      /// &lt;pdGenerated&gt;default getter&lt;/pdGenerated&gt;<br />
      public System.Collections.ArrayList GetTaches()<br />
      {<br />
         if (taches == null)<br />
            taches = new System.Collections.ArrayList();<br />
         return taches;<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default setter&lt;/pdGenerated&gt;<br />
      public void SetTaches(System.Collections.ArrayList newTaches)<br />
      {<br />
         RemoveAllTaches();<br />
         foreach (Taches oTaches in newTaches)<br />
            AddTaches(oTaches);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Add&lt;/pdGenerated&gt;<br />
      public void AddTaches(Taches newTaches)<br />
      {<br />
         if (newTaches == null)<br />
            return;<br />
         if (this.taches == null)<br />
            this.taches = new System.Collections.ArrayList();<br />
         if (!this.taches.Contains(newTaches))<br />
            this.taches.Add(newTaches);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Remove&lt;/pdGenerated&gt;<br />
      public void RemoveTaches(Taches oldTaches)<br />
      {<br />
         if (oldTaches == null)<br />
            return;<br />
         if (this.taches != null)<br />
            if (this.taches.Contains(oldTaches))<br />
               this.taches.Remove(oldTaches);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default removeAll&lt;/pdGenerated&gt;<br />
      public void RemoveAllTaches()<br />
      {<br />
         if (taches != null)<br />
            taches.Clear();<br />
      }<br />
      public System.Collections.ArrayList technologie;<br />
      <br />
      /// &lt;pdGenerated&gt;default getter&lt;/pdGenerated&gt;<br />
      public System.Collections.ArrayList GetTechnologie()<br />
      {<br />
         if (technologie == null)<br />
            technologie = new System.Collections.ArrayList();<br />
         return technologie;<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default setter&lt;/pdGenerated&gt;<br />
      public void SetTechnologie(System.Collections.ArrayList newTechnologie)<br />
      {<br />
         RemoveAllTechnologie();<br />
         foreach (gestion_technologies.Technologie oTechnologie in newTechnologie)<br />
            AddTechnologie(oTechnologie);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Add&lt;/pdGenerated&gt;<br />
      public void AddTechnologie(gestion_technologies.Technologie newTechnologie)<br />
      {<br />
         if (newTechnologie == null)<br />
            return;<br />
         if (this.technologie == null)<br />
            this.technologie = new System.Collections.ArrayList();<br />
         if (!this.technologie.Contains(newTechnologie))<br />
            this.technologie.Add(newTechnologie);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Remove&lt;/pdGenerated&gt;<br />
      public void RemoveTechnologie(gestion_technologies.Technologie oldTechnologie)<br />
      {<br />
         if (oldTechnologie == null)<br />
            return;<br />
         if (this.technologie != null)<br />
            if (this.technologie.Contains(oldTechnologie))<br />
               this.technologie.Remove(oldTechnologie);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default removeAll&lt;/pdGenerated&gt;<br />
      public void RemoveAllTechnologie()<br />
      {<br />
         if (technologie != null)<br />
            technologie.Clear();<br />
      }<br />
      public System.Collections.ArrayList competence;<br />
      <br />
      /// &lt;pdGenerated&gt;default getter&lt;/pdGenerated&gt;<br />
      public System.Collections.ArrayList GetCompetence()<br />
      {<br />
         if (competence == null)<br />
            competence = new System.Collections.ArrayList();<br />
         return competence;<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default setter&lt;/pdGenerated&gt;<br />
      public void SetCompetence(System.Collections.ArrayList newCompetence)<br />
      {<br />
         RemoveAllCompetence();<br />
         foreach (gestion_competences.Competence oCompetence in newCompetence)<br />
            AddCompetence(oCompetence);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Add&lt;/pdGenerated&gt;<br />
      public void AddCompetence(gestion_competences.Competence newCompetence)<br />
      {<br />
         if (newCompetence == null)<br />
            return;<br />
         if (this.competence == null)<br />
            this.competence = new System.Collections.ArrayList();<br />
         if (!this.competence.Contains(newCompetence))<br />
            this.competence.Add(newCompetence);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default Remove&lt;/pdGenerated&gt;<br />
      public void RemoveCompetence(gestion_competences.Competence oldCompetence)<br />
      {<br />
         if (oldCompetence == null)<br />
            return;<br />
         if (this.competence != null)<br />
            if (this.competence.Contains(oldCompetence))<br />
               this.competence.Remove(oldCompetence);<br />
      }<br />
      <br />
      /// &lt;pdGenerated&gt;default removeAll&lt;/pdGenerated&gt;<br />
      public void RemoveAllCompetence()<br />
      {<br />
         if (competence != null)<br />
            competence.Clear();<br />
      }<br />
   <br />
      private int id;<br />
      private String nom;<br />
      private String description;<br />
      private String objectifs;<br />
      private DateTime dateDebut;<br />
      private DateTime dateEcheance;<br />
   <br />
   }<br />
}
</p>
</td></tr>
</table><br />
<h3>
<a name="127">Début de la classe Projet</a> 
</h3>
<table class="Text" border="1" cellpadding="3" cellspacing="1" width="100%"><tr><td>
<p align="left">/***********************************************************************<br />
 * Module:  Projet.cs<br />
 * Author:  essarraj<br />
 * Purpose: Definition of the Class gestion_projets.Projet<br />
 ***********************************************************************/
</p>
</td></tr>
</table><br />
<h3>
<a name="128">Importations de la classe Projet</a> 
</h3>
<table class="Text" border="1" cellpadding="3" cellspacing="1" width="100%"><tr><td>
<p align="left">using System;
</p>
</td></tr>
</table><br />
<hr />
<table><tr>
<td><table class="NavGroup"><tr><td><a class="NavButton" href="Rapp57.htm">Précédent</a></td></tr></table></td>
<td width=4></td>
<td><table class="NavGroup"><tr><td><a class="NavButton" href="Accueil_BleuClair.html">Accueil</a></td></tr></table></td>
<td width=4></td>
<td><table class="NavGroup"><tr><td><a class="NavButton" href="Rapp59.htm">Suivant</a></td></tr></table></td></tr></table>
<br />
<br />
</body>
</html>
